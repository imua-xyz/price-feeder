// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: query/v1/query.proto

package feeder

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FeederStatus_HealthCheck_FullMethodName  = "/query.v1.FeederStatus/HealthCheck"
	FeederStatus_GetAllPrices_FullMethodName = "/query.v1.FeederStatus/GetAllPrices"
	FeederStatus_GetPrice_FullMethodName     = "/query.v1.FeederStatus/GetPrice"
)

// FeederStatusClient is the client API for FeederStatus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FeederStatusClient interface {
	HealthCheck(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HealthResponse, error)
	GetAllPrices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PriceList, error)
	GetPrice(ctx context.Context, in *GetPriceRequest, opts ...grpc.CallOption) (*GetPriceResponse, error)
}

type feederStatusClient struct {
	cc grpc.ClientConnInterface
}

func NewFeederStatusClient(cc grpc.ClientConnInterface) FeederStatusClient {
	return &feederStatusClient{cc}
}

func (c *feederStatusClient) HealthCheck(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, FeederStatus_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feederStatusClient) GetAllPrices(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*PriceList, error) {
	out := new(PriceList)
	err := c.cc.Invoke(ctx, FeederStatus_GetAllPrices_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *feederStatusClient) GetPrice(ctx context.Context, in *GetPriceRequest, opts ...grpc.CallOption) (*GetPriceResponse, error) {
	out := new(GetPriceResponse)
	err := c.cc.Invoke(ctx, FeederStatus_GetPrice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FeederStatusServer is the server API for FeederStatus service.
// All implementations must embed UnimplementedFeederStatusServer
// for forward compatibility
type FeederStatusServer interface {
	HealthCheck(context.Context, *Empty) (*HealthResponse, error)
	GetAllPrices(context.Context, *Empty) (*PriceList, error)
	GetPrice(context.Context, *GetPriceRequest) (*GetPriceResponse, error)
	mustEmbedUnimplementedFeederStatusServer()
}

// UnimplementedFeederStatusServer must be embedded to have forward compatible implementations.
type UnimplementedFeederStatusServer struct {
}

func (UnimplementedFeederStatusServer) HealthCheck(context.Context, *Empty) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedFeederStatusServer) GetAllPrices(context.Context, *Empty) (*PriceList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPrices not implemented")
}
func (UnimplementedFeederStatusServer) GetPrice(context.Context, *GetPriceRequest) (*GetPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrice not implemented")
}
func (UnimplementedFeederStatusServer) mustEmbedUnimplementedFeederStatusServer() {}

// UnsafeFeederStatusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FeederStatusServer will
// result in compilation errors.
type UnsafeFeederStatusServer interface {
	mustEmbedUnimplementedFeederStatusServer()
}

func RegisterFeederStatusServer(s grpc.ServiceRegistrar, srv FeederStatusServer) {
	s.RegisterService(&FeederStatus_ServiceDesc, srv)
}

func _FeederStatus_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeederStatusServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeederStatus_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeederStatusServer).HealthCheck(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeederStatus_GetAllPrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeederStatusServer).GetAllPrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeederStatus_GetAllPrices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeederStatusServer).GetAllPrices(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FeederStatus_GetPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FeederStatusServer).GetPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FeederStatus_GetPrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FeederStatusServer).GetPrice(ctx, req.(*GetPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FeederStatus_ServiceDesc is the grpc.ServiceDesc for FeederStatus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FeederStatus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "query.v1.FeederStatus",
	HandlerType: (*FeederStatusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _FeederStatus_HealthCheck_Handler,
		},
		{
			MethodName: "GetAllPrices",
			Handler:    _FeederStatus_GetAllPrices_Handler,
		},
		{
			MethodName: "GetPrice",
			Handler:    _FeederStatus_GetPrice_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "query/v1/query.proto",
}
